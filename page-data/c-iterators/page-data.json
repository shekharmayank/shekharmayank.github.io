{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/c-iterators","result":{"data":{"post":{"__typename":"MdxPost","slug":"/c-iterators","title":"[C++] Iterators","date":"09.12.2017","tags":[{"name":"Programming","slug":"programming"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"[C++] Iterators\",\n  \"date\": \"2017-12-09T00:00:00.000Z\",\n  \"tags\": [\"Programming\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Iterators are used to point at memory addresses. As the name suggests, iterators can be used to sequentially iterate through memory.\"), mdx(\"p\", null, \"Header that should be included in order to work with iterators is:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#include <iterator>\")), mdx(\"p\", null, \"Operations of iterators :-\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"begin()\"), \" :- This function is used to return the beginning position of the container.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end()\"), \" :- This function is used to return the end position of the container.\"))), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n#include <interator>\\n#include <vector>\\nusing namespace std;\\nint main(){\\n  vector<int> a = {1, 2, 3, 4, 5};\\n  \\n  //interator declaration \\n  vector<int>::iterator ia;\\n  \\n  //usage example of iterator\\n  for(ia = a.begin(); ia < a.end(); ++ia){\\n    cout<<*ia<<' ';\\n  }\\n  \\n  return 0;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Iterators are used to point at memory addresses. As the name suggests, iterators can be used to sequentially iterate through memory. Headerâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/c-iterators"}}}