{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/c-hourglass-problem","result":{"data":{"post":{"__typename":"MdxPost","slug":"/c-hourglass-problem","title":"[C++] Hourglass Problem","date":"10.12.2017","tags":[{"name":"Programming","slug":"programming"}],"description":"My solution to the hourglass problem on hackerrank.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"[C++] Hourglass Problem\",\n  \"date\": \"2017-12-10T00:00:00.000Z\",\n  \"description\": \"My solution to the hourglass problem on hackerrank.\",\n  \"tags\": [\"Programming\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"My solution to the hourglass problem given \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.hackerrank.com/challenges/30-2d-arrays/problem\"\n  }), \"here\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"int main(){ //author: Mayank Shekhar (github.com/mayankshekhar03)\\n    /*curr = value of current hour glass\\n      max = hourglass with maximum value\\n      init = used to give max the first value of curr\\n    */\\n    int curr = 0, max = 0, init=0;\\n    vector< vector<int> > arr(6,vector<int>(6));\\n    for(int arr_i = 0;arr_i < 6;arr_i++){\\n       for(int arr_j = 0;arr_j < 6;arr_j++){\\n          cin >> arr[arr_i][arr_j];\\n       }\\n    }\\n    int hor = arr[1].size() - 2;\\n    int ver = arr[1].size() - 2;\\n    for (int i = 0; i < hor; i++){\\n        for (int j = 0; j < ver; j++){\\n            curr = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2];\\n            if( curr > max || (abs(curr) > max && init==0) ){\\n                max = curr;\\n                init = 1;\\n            }\\n        }\\n    }\\n    cout<<max;\\n    return 0;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"My solution to the hourglass problem given  here .","timeToRead":1,"banner":null}},"pageContext":{"slug":"/c-hourglass-problem"}}}